import cv2
import mediapipe as mp
import numpy as np
from mediapipe.framework.formats import landmark_pb2 as mediapipe_landmarks

mediapipe_drawing = mp.solutions.drawing_utils
mediapipe_pose = mp.solutions.pose
cap = cv2.VideoCapture(0)

count = 0
stage = "up"

def calculate_angle(start_idx, end_idx):
    start_idx = np.array(start_idx)
    end_idx = np.array(end_idx)

    radians = np.arctan2(end_idx[1] - start_idx[1], end_idx[0] - start_idx[0])
    angle = np.abs(radians * 180.0 / np.pi)

    if angle > 180.0:
        angle = 360 - angle
    return angle

## setup mediapipe instance
with mediapipe_pose.Pose(min_detection_confidence = 0.5, min_tracking_confidence = 0.5, model_complexity = 1) as pose:
    while cap.isOpened():
        success, image = cap.read()
        
        width = 1200
        height = 900

        image = cv2.resize(image, (width, height))        
        if not success:
            print("camera error")
            break

        image.flags.writeable = False
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        results = pose.process(image)
        
        # Extract landmarks for shoulder and hand
        right_shoulder_landmark = results.pose_landmarks.landmark[11] if results.pose_landmarks.landmark[11].visibility > 0.8 else None
        left_shoulder_landmark = results.pose_landmarks.landmark[13] if results.pose_landmarks.landmark[12].visibility > 0.8 else None

        image.flags.writeable = True                                                                                                        
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)                                                                                      
        
        if right_shoulder_landmark is not None and left_shoulder_landmark is not None:                                                  
            # Calculate angle                                           
            angle = calculate_angle([right_shoulder_landmark.x, right_shoulder_landmark.y], [left_shoulder_landmark.x, left_shoulder_landmark.y])

            # Count occurrences based on conditions                                                                             
            if (angle > 40):
                stage = "down"            
            if (angle < 40) and (stage == "down"):
                stage = "up"
                count += 1
                print(count)                   
            # Visualize angle
            cv2.putText(image, f"Angle : {str(round(angle))}", (50, 60), cv2.FONT_HERSHEY_DUPLEX, 2, (255, 255, 255))
            cv2.putText(image, f"Count : {str(round(count))}", (0, 780), cv2.FONT_HERSHEY_DUPLEX, 3, (255, 0, 255))

        mediapipe_drawing.draw_landmarks(image, results.pose_landmarks, mediapipe_pose.POSE_CONNECTIONS,
                                         mediapipe_drawing.DrawingSpec(color=(240, 117, 66), thickness=2, circle_radius=2),
                                         mediapipe_drawing.DrawingSpec(color=(240, 66, 230), thickness=2, circle_radius=2)
        )

        cv2.imshow('****Body Movements****', image)
        if cv2.waitKey(10) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()
